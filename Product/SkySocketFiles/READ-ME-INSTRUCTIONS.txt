********CURRENT ISSUES*********: 

TO RUN DEMO (IMPORTANT: use python3 for all commands!):
	-you do not have machine learning yolov4 module (only jonathan laptop has it)
	-1) run car_command_server 
	-2)run RedandEdgeDetect on drone (you should now see red_and_edge detect and Edge_server_video topics posted to video topics and view them from web browser socket connection)
	-3)run car_edge_server (the socket module imported by yolov4 module) - I wrote a main for it specifically for testing.
	-4) car should start driving, and drone camera seeing red should stop car.


TO KILL AND RESTART DEMO:
-run this command to make sure port is closed on car:
	-netstat | grep 10600
	-if port is not closed; wait, and also do this:
	-on the drone: 
		-ctrl + z to pause (ctrl + c does not work)
		-run the RedandEdgeDetect program again (while car_command_server is killed) and wait for program to exit automatically due to no connection.
	-now you can check using netstat on car again to see if port is closed - if grep output shows nothing, then you are good to start demo again;


	
****END OF CURRENT ISSUES ******


#logging outputs to the console and appended to log files for both drone and car programs on the respective device where the program is ran.

1.Run the car_command_server.py file on the car first

2.Then, run RedDetect_drone-SD2_demo-v4.py on the drone, which will call the drone_client.py 
program which should be in the correct path (which is set as the same directory where red detect program is called).

3.SPECIAL NOTE: The drone and car have python2.7 interpreters.
	a.MAKE SURE TO USE PYTHON 3 VERSION AND ABOVE
		i.SO RUN: python3 name_of_program.py on car and drone, respectively.

#Current status:
demo is working! Loop functionality added! ready for SD2 Demo on June 12th, 2023

#Special note:

In the RedDetect_drone-SD1_demo-v4.py file, the line:
	
	from picarx import Picarx

imports a package (from this path: /home/pi/picar-x/picarx), and inside of that directory is the 
__init__.py file, which tells python that the directory is a package directory.
The __init__.py file contains the following lines:
	#!/usr/bin/env python3
	from .picarx import Picarx
	
The first line tells python which interpreter to use and gives the path (called a shebang), the second line tells python to import the module
(yes the module (aka .py file) has the same name as the package directory name (bad practice) that is in the package directory.
The dot (.) before picarx indicates that the module is located in the same package directory as the __init__.py file.

so here is the overall flow when you see "from picarx import Picarx":
	1) go to /home/pi/picar-x/picarx
	2) see __init__.py file; and now python knows the directory is a package; 
	3) now execute __init__.py file
		4) use python3 interpreter
		5) import Picarx class from the picarx module, which is a module found in the same package directory 
			(/home/pi/picar-x/picarx) as the __init__.py file.
So essentially, you are importing a package (picarx package), then a module (picarx.py) from the package through the __init__.py package initialization file
(which can be blank if no initialization is needed, but in this case it is used), then a class (Picarx) from that module.
So you are not directly importing the picarx module.